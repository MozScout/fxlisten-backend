service: api

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  stage: ${opt:stage, 'local'}
  environment:
    ENV: ${self:provider.stage}
    LISTEN_SERVER: ${ssm:listen_server~true}
    LISTEN_JWT: ${ssm:listen_jwt~true}
    JWT_SECRET: ${ssm:JWT_SECRET~true}
    DOMAIN: ${ssm:DOMAIN~true}
    CERTIFICATE: ${ssm:CERTIFICATE~true}
  iamRoleStatements:
  - Effect: Allow
    Action:
      - "dynamodb:*"
    Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"

plugins:
  - serverless-offline
  - serverless-dynamodb-autoscaling
  - serverless-domain-manager

custom:
  serverless-offline:
    port: 4000
  capacities:
    - table: usersTable
      read:
        minimum: 5
        maximum: 100
        usage: 0.75
      write:
        minimum: 5
        maximum: 100
        usage: 0.75
    - table: notesTable
      read:
        minimum: 5
        maximum: 100
        usage: 0.75
      write:
        minimum: 5
        maximum: 100
        usage: 0.75
    - table: eventsTable
      read:
        minimum: 5
        maximum: 100
        usage: 0.75
      write:
        minimum: 5
        maximum: 100
        usage: 0.75
  customDomain:
    domainName: ${self:provider.environment.DOMAIN}
    stage: ${self:provider.stage}
    basePath: ""
    certificateName: ${self:provider.environment.CERTIFICATE}
    createRoute53Record: true
           
functions:
  login:
    handler: handlers/login.handler
    events:
      - http:
          path: login
          method: post
          cors: true
  register:
    handler: handlers/register.handler
    events:
      - http:
          path: register
          method: post
          cors: true
  topicList:
    handler: handlers/topicList.handler
    events:
      - http:
          path: topicList
          method: get
          cors: true
  event:
    handler: handlers/event.handler
    events:
      - http:
          path: event
          method: post
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0
  search:
    handler: handlers/search.handler
    events:
      - http:
          path: search
          method: get
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0
  subTopicList:
    handler: handlers/subTopicList.handler
    events:
      - http:
          path: subTopicList
          method: get
          cors: true
  listenList:
    handler: handlers/listenList.handler
    events:
      - http:
          path: listenList
          method: get
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0
      - http:
          path: listenList
          method: delete
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0
  topics:
    handler: handlers/topics.handler
    events:
      - http:
          path: topics
          method: get
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0
      - http:
          path: topics
          method: put
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0
      - http:
          path: topics
          method: delete
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0
  article:
    handler: handlers/article.handler
    events:
      - http:
          path: article
          method: post
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0
  subscriptionList:
    handler: handlers/subscriptionList.handler
    events:
      - http:
          path: subscriptionList
          method: get
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0
      - http:
          path: subscriptionList
          method: put
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0
      - http:
          path: subscriptionList
          method: delete
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0
  notesList:
    handler: handlers/notesList.handler
    events:
      - http:
          path: notesList
          method: get
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0
      - http:
          path: notesList
          method: post
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0
      - http:
          path: notesList
          method: delete
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0
  summary:
    handler: handlers/summary.handler
    events:
      - http:
          path: summary
          method: post
          cors: true
          authorizer: 
            arn: ${ssm:AUTHORIZER_ARN~true}
            resultTtlInSeconds: 0

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users-${self:provider.environment.ENV}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    notesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: notes-${self:provider.environment.ENV}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
        - IndexName: userIndex
          KeySchema:
          - AttributeName: userId
            KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: '5'
            WriteCapacityUnits: '5'
        - IndexName: itemIndex
          KeySchema:
          - AttributeName: itemId
            KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: '5'
            WriteCapacityUnits: '5'
    eventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: events-${self:provider.environment.ENV}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: eventType
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: itemType
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
        - IndexName: userIndex
          KeySchema:
          - AttributeName: userId
            KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: '5'
            WriteCapacityUnits: '5'
        - IndexName: itemIdIndex
          KeySchema:
          - AttributeName: itemId
            KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: '5'
            WriteCapacityUnits: '5'
        - IndexName: itemTypeIndex
          KeySchema:
          - AttributeName: itemType
            KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: '5'
            WriteCapacityUnits: '5'
        - IndexName: eventTypeIndex
          KeySchema:
          - AttributeName: eventType
            KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: '5'
            WriteCapacityUnits: '5'


